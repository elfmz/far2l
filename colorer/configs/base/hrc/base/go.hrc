<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hrc PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN"
  "http://colorer.sf.net/2003/hrc.dtd">
<hrc version="take5" xmlns="http://colorer.sf.net/2003/hrc"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd">
<type name="go">

 <annotation>
 <documentation>
    Go syntax description

    https://golang.org/ref/spec
 </documentation><contributors><![CDATA[
    Mikhail Kupchik <Mikhail.Kupchik@gmail.com>
    anatoly techtonik <techtonik@gmail.com>
 ]]></contributors>
 </annotation>

  <import type="def"/>

  <region name="Character" parent="def:Character"/>
  <region name="String" parent="def:String"/>
  <region name="StringEscape" parent="def:StringContent"/>
  <region name="StringFormat" parent="def:VarStrong"/>
  <region name="StringContent" parent="def:StringContent"/>

  <region name="LineComment" parent="def:LineComment"/>
  <region name="Comment" parent="def:Comment"/>

  <region name="Symbol" parent="def:Symbol"/>

  <region name="Keywords" parent="def:Keyword"/>
  <region name="FunctionKeyword" parent="def:FunctionKeyword"/>


  <scheme name="Character">
   <regexp match="/[Ll]?'(\\\D | \\[0-7]{1,3} | \\x[\da-fA-F]{2} | [^\\']){1,4}'/x" region="Character"/>
   <regexp match="/'.*?'/" region="def:Error"/>
  </scheme>

  <scheme name="String">
   <block start="/(?{def:StringEdge}[Ll]?&#34;)/" end="/(?{def:StringEdge}&#34;)/"
          scheme="StringContent" region="String" inner-region="yes"
          region00='def:PairStart' region10='def:PairEnd'
   />
  </scheme>

  <entity name='format' value='[\-\+\#0]*?[\d\*]*(?{}\.[\d\*]+)?[Ll]?[a-z]'/>
  <scheme name="StringContent">
   <regexp match="/\\\\$/" region="def:Error"/>
   <regexp match="/((\%)[\dA-Z_]{2,}(\%))(%format;|%)?!/" region1="def:Var" region2="def:PairStart" region3="def:PairEnd"/>
   <regexp match="/\\[^xX\d]/" region="StringEscape"/>
   <regexp match="/\\$/" region="StringEscape"/>
   <regexp match="/\\x[\da-fA-F]{1,8}/i" region="StringEscape"/>
   <regexp match="/\\[0-7]{1,12}/" region="StringEscape"/>
   <regexp match="/\%(%format;|\%)/" region="StringFormat"/>
   <regexp match="/[^\\\&#34;]$/" region="def:Error"/>
   <inherit scheme="TabsAsErrors"/>
  </scheme>

  <!-- https://golang.org/ref/spec#String_literals -->
  <scheme name="RawString">
    <block start="/(`)/" end="/(`)/" scheme="def:empty" region="def:String" region01="def:PairStart" region10="def:PairEnd"/>
  </scheme>

  <scheme name="TabsAsErrors" if="tabs-as-errors">
    <regexp match="/\t+/" region='def:Error'/>
  </scheme>

  <scheme name="go">
   <inherit scheme="Expression"/>
  </scheme>

  <scheme name="Expression">

   <block start="/(\()/" end="/(\))/" scheme="Expression"
          region00="Symbol" region01="PairStart" region10="Symbol" region11="PairEnd"/>
   <block start="/(\[)/" end="/(\])/" scheme="Expression"
          region00="Symbol" region01="PairStart" region10="Symbol" region11="PairEnd"/>
   <block start="/(\{)/" end="/(\})/" scheme="Expression"
          region00="Symbol" region01="PairStart" region10="Symbol" region11="PairEnd"/>

   <inherit scheme="Character"/>
   <inherit scheme="String"/>
   <inherit scheme="RawString"/>

   <!-- Numbers -->
   <inherit scheme="def:Number"/>
   <inherit scheme="def:BadHex"/>

   <!-- Doxygen Comments -->
   <regexp match="/\/\*\*\//" region="def:CommentDoc"/>
   <block start="/\/\/\//" end="/$/" scheme="doxygen:doxygen" region="def:CommentDoc"/>
   <block start="/\/\*\*/" end="/\*\//" scheme="doxygen:doxygen" region="def:CommentDoc"
          region00="def:PairStart" region10="def:PairEnd"/>

   <!-- Comments -->
   <block start="/\/\//" end="/$/" scheme="def:Comment" region="LineComment"/>
   <block scheme="def:Comment" region="Comment">
      <start region0="def:PairStart"><![CDATA[/\/\*/]]></start>
      <end region0="def:PairEnd"><![CDATA[/\*\//]]></end>
   </block>

   <!-- Keyword func -->
   <regexp match="/\b(func)\b/i" region1="FunctionKeyword" region="def:Outlined"/>

   <!-- Go keywords -->
   <keywords region="Keywords">
      <word name="break" />
      <word name="case" />
      <word name="chan" />
      <word name="const" />
      <word name="continue" />
      <word name="default" />
      <word name="defer" />
      <word name="else" />
      <word name="fallthrough" />
      <word name="for" />
      <word name="go" />
      <word name="goto" />
      <word name="if" />
      <word name="import" />
      <word name="interface" />
      <word name="map" />
      <word name="package" />
      <word name="range" />
      <word name="return" />
      <word name="select" />
      <word name="struct" />
      <word name="switch" />
      <word name="type" />
      <word name="var" />
   </keywords>

   <keywords region="Symbol">
      <symb name="+" />
      <symb name="=" />
      <symb name="-" />
      <symb name="|" />
      <symb name="!" />
      <symb name="&amp;" />
      <symb name="&lt;" />
      <symb name="[" />
      <symb name="]" />
      <symb name="*" />
      <symb name="^" />
      <symb name="&gt;" />
      <symb name="{" />
      <symb name="}" />
      <symb name="/" />
      <symb name=":" />
      <symb name="," />
      <symb name=";" />
      <symb name="%" />
      <symb name="." />
      <symb name=":" />
   </keywords>

  </scheme>

</type>

</hrc>
<!--
Copyright (C) 2025 Mikhail Kupchik <Mikhail.Kupchik@gmail.com>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, see <https://www.gnu.org/licenses/>
-->