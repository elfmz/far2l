<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hrc PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN"
  "http://colorer.sf.net/2003/hrc.dtd">
<hrc version="take5" xmlns="http://colorer.sf.net/2003/hrc"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd">

  <type name="haxe">

    <annotation><documentation>
        Haxe
        Based on: ActionScript
    </documentation></annotation>

    <import type="def"/>

    <region name="Code" parent="def:Text"/> <!-- ??? -->
    <region name="StringEscape" parent="def:StringContent"/>
    <region name='Package' parent='def:Directive'/>
    <region name='PackageOutline' parent='def:Outlined'/>
    <region name='Import' parent='def:Directive'/>
    <region name='ImportOutline' parent='def:Outlined'/>
    <region name='Annotation' parent='def:Label'/>
    <region name='Interpolation' parent='def:StringEdge'/>
    <region name="Ident" parent="def:Identifier"/>
    <region name="LiteralKeyword" parent="def:Keyword"/>
    <region name="XmlContent" parent="def:String"/>
    <region name="StandardType" parent="def:Keyword"/>
    <region name="StandardProperty" parent="def:Identifier"/>

    <region name="Preproc"     parent="def:DirectiveContent"/>
    <region name="PreprocPref" parent="def:DirectiveEdge"/> <!-- # -->
    <region name="PreprocWord" parent="def:Directive"/> <!-- !!EE: def:Keyword -->


    <scheme name="String">
      <regexp match="/\\[xX]0*[\da-fA-F]{1,2}/" region0="StringEscape"/>
      <regexp match="/\\[^xX0-7]/"              region0="StringEscape"/>
    </scheme>

    <scheme name="InterpolateString">
      <regexp match="/\\[xX]0*[\da-fA-F]{1,2}/" region0="StringEscape"/>
      <regexp match="/\\[^xX0-7]/"              region0="StringEscape"/>

      <block start="/(\$\{)/" end="/(\})/" scheme="haxe" region="Code" region00="Interpolation" region01="PairStart" region10="Interpolation" region11="PairEnd"/>
      <regexp match="/(\$)(\w[\w\d]*)/" region1="Interpolation" region2="Code"/>
    </scheme>

    <scheme name="RegexString">
      <regexp match="/\\[xX]0*[\da-fA-F]{1,2}/" region0="StringEscape"/>
      <regexp match="/\\[^xX0-7]/"              region0="StringEscape"/>
    </scheme>
      

    <scheme name="PreprocParams">
      <block start="/(\()/" end="/(\))/" scheme="PreprocParams" region01="PairStart" region11="PairEnd"/>
    </scheme>

    <scheme name="Preproc">
      <block  start="/(#if|#elseif|#error)\s*(!\s*)?(\()/" end="/(\))/"     scheme="PreprocParams" region="Preproc" region01="PreprocWord" region03="PairStart" region11="PairEnd"/>
      <block  start="/(#if|#elseif|#error)\s*(&quot;)/"    end="/(&quot;)/" scheme="String"        region="String"  region01="PreprocWord" region02="PairStart" region11="PairEnd"/>
      <regexp match="/(#if|#elseif|#error)\s+(!\s*)?([\w\d]+)/"                                    region="Preproc" region1="PreprocWord"/>
      <regexp match="/(#else|#end)/"                                                               region="Preproc" region1="PreprocWord"/>
      <regexp match="/\#/" region='def:Error'/>
    </scheme>

    <scheme name="AnnotationParams">
      <inherit scheme="haxe"/>
    </scheme>

    <scheme name="Annotation">
       <block start="/ (@:? [\w\$\.]+) \s* (\() /x" end="/(\))/" scheme="AnnotationParams" region="Annotation" region02="PairStart" region11="PairEnd"/>
       <regexp match="/ (@:? [\w\$\.]+) /x" region0="Annotation"/>
      <regexp match="/\@/" region='def:Error'/>
    </scheme>

    <scheme name="HaxeIdent">
      <regexp match="/[\w$][\w\d]*/"   region0="Ident"/>
    </scheme>

    <scheme name="haxe">

      <inherit scheme="def:unixCommentDirective"/>
      <regexp match="/\/\*\*\//" region="Comment"/>
      <block start="/\/\*\*/" end="/\*\//"  scheme="Comment" region="CommentDoc" region00="PairStart" region10="PairEnd"/>
      <block start="/\/\*/"   end="/\*\//"  scheme="Comment" region="Comment"    region00="PairStart" region10="PairEnd"/>
      <block start="/\/\//"   end="/$/"     scheme="Comment" region="Comment"/>

      <inherit scheme="Preproc"/>
      <inherit scheme="Annotation"/>

      <regexp match="/(package)\s+\m(([\w\._]+))/"        region1="Keyword" region2="Package" region3="PackageOutline"/>
      <regexp match="/(import|using)\s+\m(([\w\._\*]+))/" region1="Keyword" region2="Import"  region3="ImportOutline"/>

      <block start="/(\{)/"   end="/(\})/"   scheme="haxe" region00="Symbol" region01="PairStart" region10="Symbol" region11="PairEnd"/>
      <block start="/(\()/"   end="/(\))/"   scheme="haxe" region00="Symbol" region01="PairStart" region10="Symbol" region11="PairEnd"/>
      <block start="/(\[)/"   end="/(\])/"   scheme="haxe" region00="Symbol" region01="PairStart" region10="Symbol" region11="PairEnd"/>


<!-- Strings -->
      <block start="/(&quot;)/" end="/(&quot;)/"    scheme="String"            region="String" region00="def:StringEdge" region01="def:PairStart" region10="def:StringEdge" region11="def:PairEnd"/>
      <block start="/(&apos;)/" end="/(&apos;)/"    scheme="InterpolateString" region="String" region00="def:StringEdge" region01="def:PairStart" region10="def:StringEdge" region11="def:PairEnd"/>
      <block start="/(\~\/)/"   end="/(\/[gxms]?)/" scheme="RegexString"       region="String" region00="def:Label"      region01="def:PairStart" region10="def:Label"      region11="def:PairEnd"/>


      <keywords region="Keyword">
        <word name="abstract"/>
<!--    <word name="as"/>  kw only in "import A as B" -->
        <word name="break"/>
        <word name="case"/>
        <word name="catch"/>
        <word name="class"/>
        <word name="continue"/>
        <word name="default"/>
        <word name="dynamic"/>
<!--    <word name="never"/> in getter/setter -->
        <word name="do"/>
        <word name="enum"/>
        <word name="else"/>
        <word name="extends"/>
        <word name="extern"/>
        <word name="finally"/>
        <word name="for"/>
        <word name="function"/>
        <word name="if"/>
        <word name="implements"/>
        <word name="import"/>
        <word name="in"/>
        <word name="interface"/>
        <word name="inline"/>
        <word name="new"/>
        <word name="override"/>
        <word name="package"/>
        <word name="private"/>
        <word name="public"/>
        <word name="return"/>
        <word name="static"/>
        <word name="super"/>
        <word name="switch"/>
        <word name="this"/>
        <word name="throw"/>
        <word name="try"/>
        <word name="typedef"/>
        <word name="untyped"/>
        <word name="var"/>
        <word name="while"/>
        <word name="_"/>
      </keywords>
      <keywords region="Label">
        <word name="cast"/>
        <word name="macro"/>
      </keywords>
      <keywords region="Symbol">
        <symb name="*"/>
        <symb name="/"/>
        <symb name="%"/>
        <symb name="+"/>
        <symb name="-"/>
        <symb name="!"/>
        <symb name="&lt;"/>
        <symb name="&gt;"/>
        <symb name="?"/>
        <symb name="~"/>
        <symb name="&amp;"/>
        <symb name="^"/>
        <symb name="|"/>
        <symb name="="/>
        <symb name=","/>
        <symb name="."/>
        <symb name=":"/>
        <symb name=";"/>
      </keywords>
      <keywords region="LiteralKeyword">
        <word name="true"/>
        <word name="false"/>
        <word name="null"/>
      </keywords>
      <keywords region="StandardType">
        <word name="Any"/>
        <word name="Array"/>
        <word name="Bool"/>
        <word name="Dynamic"/>
        <word name="EReg"/>
        <word name="Float"/>
        <word name="Int"/>
        <word name="Map"/>
        <word name="Null"/>
        <word name="String"/>
<!--    <word name="UInt"/> -->
        <word name="Void"/>
      </keywords>
      <inherit scheme="def:Number"/>
      <inherit scheme="HaxeIdent"/>

      <regexp match="/[^\)\}\]&gt;\s]/" region='def:Error'/>
    </scheme>
  </type>
</hrc>
<!--
Copyright (C) 1999-2005 Cail Lomecb <irusskih@gmail.com>
Copyright (C) Ralf Bokelberg <eclipse_colorer@bokelberg.de>
Copyright (C) Vladimir Panteleev <vladimi@thecybershadow.net>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, see <https://www.gnu.org/licenses/>
-->