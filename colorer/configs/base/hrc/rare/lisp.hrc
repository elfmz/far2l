<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hrc PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN"
  "http://colorer.sf.net/2003/hrc.dtd">
<hrc version="take5" xmlns="http://colorer.sf.net/2003/hrc"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd">

<type name="lisp">

<annotation>
	<documentation><![CDATA[
		Lisp language syntax

		TODO:
			- Support for multi line strings (string which contains new line symbols)
			- Highlight formatting characters in strings (e.g. ~S, ~A, etc.)
			- Do not highlight first parameter in function and macro definition
	]]></documentation>
	<contributors><![CDATA[
		Mykolas Juraitis (juramyko@soften.ktu.lt)
		Konstantin Khlopenkov
	]]></contributors>
</annotation>

<import type="def"/>

<region name='FunctionDefinition' parent='def:Outlined'/>
<region name='MacroDefinition'    parent='def:Outlined'/>
<region name='VariableDefinition' parent='def:Outlined'/>
<region name='ConstantDefinition' parent='def:Outlined'/>

<scheme name="lisp">

<!-- Single line comment -->
<regexp match="/(^|\s)(;.*)$/" region2="Comment"/>

<!-- Multi line comment -->
<block start="/\#\|/" end="/\|\#/" scheme="Comment" region="Comment" region00="PairStart" region10="PairEnd"/>

<!-- Function definition -->
<block start="/( (\() \s* defun)\M .*? (?{FunctionDefinition}[\S\)]+) /ix" end="/( \) )/x" scheme="lisp" region00="PairStart" region01="Keyword" region02="Symbol" region03="Prefix" region10="PairEnd" region11="Symbol"/>

<!-- Macro definition -->
<block start="/( (\() \s* defmacro)\M .*? (?{MacroDefinition}[\S\)]+) /ix" end="/( \) )/x" scheme="lisp" region00="PairStart" region01="Keyword" region02="Symbol" region03="Prefix" region10="PairEnd" region11="Symbol"/>

<!-- Variable definition -->
<block start="/( (\() \s* defvar)\M .*? (?{VariableDefinition}[\S\)]+) /ix" end="/( \) )/x" scheme="lisp" region00="PairStart" region01="Keyword" region02="Symbol" region03="Prefix" region10="PairEnd" region11="Symbol"/>

<!-- Constant definition -->
<block start="/( (\() \s* defconstant)\M .*? (?{ConstantDefinition}[\S\)]+) /ix" end="/( \) )/x" scheme="lisp" region00="PairStart" region01="Keyword" region02="Symbol" region03="Prefix" region10="PairEnd" region11="Symbol"/>

<!-- Function/Marco/Special operator call -->
<block start="/( (\() \s* [^;]*? ) \M ([;\s\)\(]|$) /x" end="/( \) )/x" scheme="lisp" region00="PairStart" region10="PairEnd" region01="Keyword" region02="Symbol" region11="Symbol"/>

<!-- String -->
<regexp match="/&#34;.*?&#34;/" region0="String"/>

<!-- Binary number -->
<regexp match="/\#b[01]*/" region0="def:NumberBin"/>

<!-- Number -->
<inherit scheme="def:Number"/>

<!-- Character -->
<regexp match="/\#\\\w/" region0="def:Character"/>

<!-- Keyword -->
<regexp match="/\:[\w-*+]*/" region0="FunctionKeyword"/>

<!-- Comma -->
<regexp match="/\,[\@\w-*+]*/" region0="Prefix"/>

<!-- Function abbreviation -->
<regexp match="/\#\'[\w-*+]*/" region0="SymbolStrong"/>

<!-- Read-time conditional -->

<regexp match="/\#(\-|\+)[\w-*+]*/" region0="SymbolStrong"/>

<!-- Quoted symbol -->
<regexp match="/[\'\`][\w-*+]*/" region0="SymbolStrong"/>

<!-- Constant variables -->
<keywords ignorecase="yes" region="Constant">
	<word name="array-dimension-limit" />
	<word name="pi" />
	<word name="most-positive-fixnum" />
	<word name="most-negative-fixnum" />
	<word name="nil" />
	<word name="t" />
</keywords>

<!-- Lambda list keywords -->
<keywords ignorecase="yes" region="FunctionKeyword">
	<word name="&amp;allow-other-keys" />
	<word name="&amp;aux" />
	<word name="&amp;key" />
	<word name="&amp;optional" />
	<word name="&amp;rest" />
</keywords>

<keywords region="Symbol">
	<symb name="="/>
	<symb name="+"/>
	<symb name="/"/>
	<symb name="&amp;"/>
	<symb name="|"/>
	<symb name="^"/>
	<symb name="["/>
	<symb name="'"/>
	<symb name="]"/>
	<symb name=","/>
	<symb name="."/>
	<symb name=":"/>
	<symb name="!"/>
	<symb name="~"/>
	<symb name="&lt;"/>
	<symb name="&gt;"/>
	<symb name="%"/>
	<symb name="{"/>
	<symb name="}"/>
	<symb name="?"/>
	<symb name="(" region="Error"/>
	<symb name=")" region="Error"/>
</keywords>

</scheme>

</type>

</hrc>
<!--
Copyright (C) 1999-2005 Cail Lomecb <irusskih@gmail.com>
Copyright (C) Mykolas Juraitis
Copyright (C) Konstantin Khlopenkov

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, see <https://www.gnu.org/licenses/>
-->