<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hrc
  PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN" "http://colorer.sf.net/2003/hrc.dtd">
<hrc xmlns="http://colorer.sf.net/2003/hrc" xmlns:xs="http://www.w3.org/2001/XMLSchema"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     version="take5"
     xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd">
<!--
  insert this define into HRC base catalog file (colorer.hrc)

  <prototype name="hrd" group="group" description="hrd" targetNamespace="http://colorer.sf.net/2003/hrd">
    <location link="hrd.hrc"/>
    <filename>/\./ix</filename>
  </prototype>
--><type name="hrd">
      <annotation>
         <documentation>
           XSLT Generated HRC scheme for language 'hrd'
           from XML Schema with xsd2hrc.xsl version 0.9.4 
            Copyright (C) 2002-04 Cail Lomecb
            Portions copyright (C) 2004-06 Eugene Efremov

           Scheme parameters:
             targetNamespace             : http://colorer.sf.net/2003/hrd
             hrctype                     : hrd
             allow-common-attr           : yes
             allow-any-attr              : no
             allow-unknown-elements      : no
             allow-unknown-root-elements : no
             force-single-root           : yes
             default prefixes            : 
               you can change them with entity 'nsprefix'
             
             </documentation>
         <documentation>
          Schema documentation:</documentation>
         <contributors><![CDATA[Cail Lomecb, Eugene Efremov]]></contributors>
      </annotation>
      <import type="def"/>
      <region name="element.start.name" parent="xml:element.defined.start.name"/>
      <region name="element.end.name" parent="xml:element.defined.end.name"/>
      <region name="element.start.lt" parent="xml:element.start.lt"/>
      <region name="element.start.gt" parent="xml:element.start.gt"/>
      <region name="element.end.lt" parent="xml:element.end.lt"/>
      <region name="element.end.gt" parent="xml:element.end.gt"/>
      <region name="element.nsprefix" parent="xml:element.defined.nsprefix"/>
      <region name="element.nscolon" parent="xml:element.nscolon"/>
      <region name="Attribute.name" parent="xml:Attribute.defined.name"/>
      <region name="Attribute.nsprefix" parent="xml:Attribute.defined.nsprefix"/>
      <region name="Attribute.nscolon" parent="xml:Attribute.nscolon"/>
      <region name="AttValue" parent="xml:AttValue.defined"/>
      <region name="AttValue.start" parent="xml:AttValue.defined.start"/>
      <region name="AttValue.end" parent="xml:AttValue.defined.end"/>
      <region name="Enumeration" parent="xml:Enumeration"
              description="Enumerated type values"/>
      <entity name="ns-real-prefix" value=""/>
      <entity name="nsprefix" value=""/>
      <entity name="attr-nsprefix" value=""/>
      <scheme name="_hrc_int_elementContent">
         <block start="/~( (&lt;) (  ((%xml:NCName;) (:) )? (%xml:Name;) ) \M &gt;?   )/x"
                end="/( (&lt;\/) (\y3\b)?= ( (%xml:NCName;) (:) )? (%xml:Name;) \b \M \s* (&gt;?)                   | (\/ \M &gt;) )/x"
                region01="PairStart"
                region02="element.start.lt"
                region05="element.nsprefix"
                region06="element.nscolon"
                region07="element.start.name"
                region11="PairEnd"
                region12="element.end.lt"
                region15="element.nsprefix"
                region16="element.nscolon"
                region17="element.end.name"
                region18="element.end.gt"
                region19="element.start.gt"
                scheme="xml:elementContent2"/>
         <inherit scheme="xml:badChar"/>
      </scheme>
      <scheme name="_hrc_int_AttValue">
         <block start="/(&#34;)/" end="/(\y1)/" region00="PairStart" region10="PairEnd"
                region01="AttValue.start"
                region11="AttValue.end"
                scheme="xml:AttValue.content.quot"
                region="AttValue"/>
         <block start="/(')/" end="/(\y1)/" region00="PairStart" region10="PairEnd"
                region01="AttValue.start"
                region11="AttValue.end"
                scheme="xml:AttValue.content.apos"
                region="AttValue"/>
      </scheme>
      <scheme name="AttributeContent">
         <inherit scheme="xml:AttributeContent">
            <virtual scheme="xml:AttValue" subst-scheme="_hrc_int_AttValue"/>
         </inherit>
      </scheme>
      <!--custom schemes from '../../src/colorer/src/custom.colorer.xml'--><scheme name="region-name-content">
         <regexp match="/~(%xml:NCName;)(\:)(%xml:NCName;) \b/ix"
                 region1="xmlschema:Scheme.nsprefix"
                 region2="xmlschema:Scheme.nscolon"
                 region3="xmlschema:Scheme.name"/>
      </scheme>
      <scheme name="color-content">
         <regexp match="/(\#)([\dA-Fa-f]{6}|[\dA-Fa-f])/" region1="def:NumberPrefix"
                 region2="def:NumberHex"/>
      </scheme>
      <scheme name="style-content">
         <regexp match="/\d/" region="def:Number"/>
      </scheme>
      <!--end custom--><scheme name="hrd-element">
         <block start="/\M &lt; (%nsprefix;hrd ([\s\/&gt;]|$) )/x" end="/ &gt; /x"
                scheme="hrd-elementContent"/>
      </scheme>
      <scheme name="hrd-content">
         <block start="/\M &lt; (%nsprefix;documentation ([\s\/&gt;]|$) )/x" end="/ &gt; /x"
                scheme="documentation-elementContent"/>
         <block start="/\M &lt; (%nsprefix;assign ([\s\/&gt;]|$) )/x" end="/ &gt; /x"
                scheme="assign-elementContent"/>
      </scheme>
      <scheme name="hrd-content-error">
         <inherit scheme="hrd-content"/>
         <inherit scheme="xml:badChar"/>
      </scheme>
      <scheme name="hrd-content-cdsect">
         <inherit scheme="hrd-content-error">
            <virtual scheme="xml:badLiter" subst-scheme="xml:badCDLiter"/>
            <virtual scheme="xml:Reference" subst-scheme="def:empty"/>
         </inherit>
      </scheme>
      <scheme name="hrd-Attributes">
         <block end="/[&#34;']?#1/" region02="Attribute.name"
                start="/(\s?#1|^)(class)\M([\s\=]|$)/x"
                scheme="xmlschema:NMTOKEN-AttributeContent"/>
         <block end="/[&#34;']?#1/" region02="Attribute.name"
                start="/(\s?#1|^)(name)\M([\s\=]|$)/x"
                scheme="xmlschema:NMTOKEN-AttributeContent"/>
         <block end="/[&#34;']?#1/" region02="Attribute.name"
                start="/(\s?#1|^)(description)\M([\s\=]|$)/x"
                scheme="xmlschema:string-AttributeContent"/>
      </scheme>
      <scheme name="hrd-elementContent">
         <inherit scheme="_hrc_int_elementContent">
            <virtual scheme="xml:element" subst-scheme="hrd-content"/>
            <virtual scheme="xml:content.cdata" subst-scheme="xml:badChar"/>
            <virtual scheme="xml:Attribute.any" subst-scheme="hrd-Attributes"/>
         </inherit>
      </scheme>
      <scheme name="documentation-content">
         <regexp match="/ &lt; (%ns-real-prefix;%xml:NCName; ([\s\/&gt;]|$) )/x" region="def:Error"/>
         <inherit scheme="xml:element"/>
      </scheme>
      <scheme name="documentation-content-error">
         <inherit scheme="documentation-content"/>
         <inherit scheme="xml:badChar"/>
      </scheme>
      <scheme name="documentation-content-cdsect">
         <inherit scheme="documentation-content-error">
            <virtual scheme="xml:badLiter" subst-scheme="xml:badCDLiter"/>
            <virtual scheme="xml:Reference" subst-scheme="def:empty"/>
         </inherit>
      </scheme>
      <scheme name="documentation-Attributes"/>
      <scheme name="documentation-elementContent">
         <inherit scheme="_hrc_int_elementContent">
            <virtual scheme="xml:element" subst-scheme="documentation-content"/>
            <virtual scheme="xml:Attribute.any" subst-scheme="documentation-Attributes"/>
         </inherit>
      </scheme>
      <scheme name="assign-content"/>
      <scheme name="assign-content-error">
         <inherit scheme="assign-content"/>
         <inherit scheme="xml:badChar"/>
      </scheme>
      <scheme name="assign-content-cdsect">
         <inherit scheme="assign-content-error">
            <virtual scheme="xml:badLiter" subst-scheme="xml:badCDLiter"/>
            <virtual scheme="xml:Reference" subst-scheme="def:empty"/>
         </inherit>
      </scheme>
      <scheme name="assign-Attributes">
         <block end="/[&#34;']?#1/" region02="Attribute.name"
                start="/(\s?#1|^)(name)\M([\s\=]|$)/x"
                scheme="region-name-AttributeContent"/>
         <block end="/[&#34;']?#1/" region02="Attribute.name"
                start="/(\s?#1|^)(fore)\M([\s\=]|$)/x"
                scheme="color-AttributeContent"/>
         <block end="/[&#34;']?#1/" region02="Attribute.name"
                start="/(\s?#1|^)(back)\M([\s\=]|$)/x"
                scheme="color-AttributeContent"/>
         <block end="/[&#34;']?#1/" region02="Attribute.name"
                start="/(\s?#1|^)(style)\M([\s\=]|$)/x"
                scheme="style-AttributeContent"/>
         <block end="/[&#34;']?#1/" region02="Attribute.name"
                start="/(\s?#1|^)(stext)\M([\s\=]|$)/x"
                scheme="xmlschema:string-AttributeContent"/>
         <block end="/[&#34;']?#1/" region02="Attribute.name"
                start="/(\s?#1|^)(etext)\M([\s\=]|$)/x"
                scheme="xmlschema:string-AttributeContent"/>
         <block end="/[&#34;']?#1/" region02="Attribute.name"
                start="/(\s?#1|^)(sback)\M([\s\=]|$)/x"
                scheme="xmlschema:string-AttributeContent"/>
         <block end="/[&#34;']?#1/" region02="Attribute.name"
                start="/(\s?#1|^)(eback)\M([\s\=]|$)/x"
                scheme="xmlschema:string-AttributeContent"/>
      </scheme>
      <scheme name="assign-elementContent">
         <inherit scheme="_hrc_int_elementContent">
            <virtual scheme="xml:element" subst-scheme="assign-content"/>
            <virtual scheme="xml:content.cdata" subst-scheme="xml:badChar"/>
            <virtual scheme="xml:Attribute.any" subst-scheme="assign-Attributes"/>
         </inherit>
      </scheme>
      <scheme name="region-name-content-old"><!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: \i\c*\:\i\c*--><regexp region="Enumeration" priority="low"
                 match="/[%xml:NCNameStartChar;][%xml:NCNameChar;]*\:[%xml:NCNameStartChar;][%xml:NCNameChar;]*/"/>
      </scheme>
      <scheme name="region-name-content-error">
         <inherit scheme="region-name-content"/>
         <inherit scheme="xml:badChar"/>
      </scheme>
      <scheme name="region-name-content-cdsect">
         <inherit scheme="region-name-content-error">
            <virtual scheme="xml:badLiter" subst-scheme="xml:badCDLiter"/>
            <virtual scheme="xml:Reference" subst-scheme="def:empty"/>
         </inherit>
      </scheme>
      <scheme name="region-name-Attributes"/>
      <scheme name="region-name-AttributeContent">
         <inherit scheme="AttributeContent">
            <virtual scheme="xml:AttValue.content.stream" subst-scheme="region-name-content-error"/>
         </inherit>
      </scheme>
      <scheme name="region-name-elementContent">
         <inherit scheme="_hrc_int_elementContent">
            <virtual scheme="xml:CDSect.content.stream" subst-scheme="region-name-content-cdsect"/>
            <virtual scheme="xml:content.cdata.stream" subst-scheme="region-name-content-error"/>
            <virtual scheme="xml:element" subst-scheme="def:empty"/>
            <virtual scheme="xml:Attribute.any" subst-scheme="region-name-Attributes"/>
         </inherit>
      </scheme>
      <scheme name="color-content-old"><!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: #?[\dA-Fa-f]{1,6}--><regexp region="Enumeration" priority="low" match="/\#?[\dA-Fa-f]{1,6}/"/>
      </scheme>
      <scheme name="color-content-error">
         <inherit scheme="color-content"/>
         <inherit scheme="xml:badChar"/>
      </scheme>
      <scheme name="color-content-cdsect">
         <inherit scheme="color-content-error">
            <virtual scheme="xml:badLiter" subst-scheme="xml:badCDLiter"/>
            <virtual scheme="xml:Reference" subst-scheme="def:empty"/>
         </inherit>
      </scheme>
      <scheme name="color-Attributes"/>
      <scheme name="color-AttributeContent">
         <inherit scheme="AttributeContent">
            <virtual scheme="xml:AttValue.content.stream" subst-scheme="color-content-error"/>
         </inherit>
      </scheme>
      <scheme name="color-elementContent">
         <inherit scheme="_hrc_int_elementContent">
            <virtual scheme="xml:CDSect.content.stream" subst-scheme="color-content-cdsect"/>
            <virtual scheme="xml:content.cdata.stream" subst-scheme="color-content-error"/>
            <virtual scheme="xml:element" subst-scheme="def:empty"/>
            <virtual scheme="xml:Attribute.any" subst-scheme="color-Attributes"/>
         </inherit>
      </scheme>
      <scheme name="style-content-old"><!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: \d--><regexp region="Enumeration" priority="low" match="/\d/"/>
      </scheme>
      <scheme name="style-content-error">
         <inherit scheme="style-content"/>
         <inherit scheme="xml:badChar"/>
      </scheme>
      <scheme name="style-content-cdsect">
         <inherit scheme="style-content-error">
            <virtual scheme="xml:badLiter" subst-scheme="xml:badCDLiter"/>
            <virtual scheme="xml:Reference" subst-scheme="def:empty"/>
         </inherit>
      </scheme>
      <scheme name="style-Attributes"/>
      <scheme name="style-AttributeContent">
         <inherit scheme="AttributeContent">
            <virtual scheme="xml:AttValue.content.stream" subst-scheme="style-content-error"/>
         </inherit>
      </scheme>
      <scheme name="style-elementContent">
         <inherit scheme="_hrc_int_elementContent">
            <virtual scheme="xml:CDSect.content.stream" subst-scheme="style-content-cdsect"/>
            <virtual scheme="xml:content.cdata.stream" subst-scheme="style-content-error"/>
            <virtual scheme="xml:element" subst-scheme="def:empty"/>
            <virtual scheme="xml:Attribute.any" subst-scheme="style-Attributes"/>
         </inherit>
      </scheme>

      <scheme name="hrd-root">
         <annotation>
            <documentation>
               You can replace these elements with needed single root element
               with customizing HRC generation process.
              </documentation>
         </annotation>
         <inherit scheme="hrd-element"/>
      </scheme>
      <scheme name="hrd-root-addref">
         <inherit scheme="hrd-root"/>
      </scheme>
      <scheme name="hrd">
         <inherit scheme="xml:singleroot">
            <virtual scheme="xml:element" subst-scheme="hrd-root-addref"/>
         </inherit>
      </scheme>
   </type>
</hrc>